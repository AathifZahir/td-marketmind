
/* File: ./src\app\config.js */
const DOMAIN = "http://localhost:3000";

export { DOMAIN };


/* File: ./src\app\layout.js */
import { Inter } from "next/font/google";
import "./globals.css";
import { Toaster } from "react-hot-toast";

const inter = Inter({
  subsets: ["latin"],
  variable: "--font-inter",
});

export const metadata = {
  title: "MarketMind AI",
  description: "Your AI-powered marketing assistant",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body className={`${inter.variable} antialiased bg-gray-50 min-h-screen`}>
        <Toaster position="top-right" />
        {children}
      </body>
    </html>
  );
}


/* File: ./src\app\page.js */
"use client";
import React, { useState } from "react";
import Link from "next/link";
import Navbar from "./components/navbar";
import { useRouter } from "next/navigation";
import { DOMAIN } from "./config";
import toast from "react-hot-toast";
import LoadingDots from "./components/LoadingDots";
import { motion } from "framer-motion";

export default function Onboarding() {
  const router = useRouter();
  const [formData, setFormData] = useState({
    businessName: "",
    industry: "",
    goal: "",
    challenges: "",
  });
  const [errors, setErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);

  const validateForm = () => {
    const newErrors = {};

    if (!formData.businessName.trim()) {
      newErrors.businessName = "Business name is required";
    }

    if (!formData.industry) {
      newErrors.industry = "Please select an industry";
    }

    if (!formData.goal) {
      newErrors.goal = "Please select a goal";
    }

    if (!formData.challenges.trim()) {
      newErrors.challenges = "Please describe your challenges";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
    // Clear error when field is edited
    if (errors[name]) {
      setErrors((prev) => ({ ...prev, [name]: null }));
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!validateForm()) {
      toast.error("Please fix the form errors");
      return;
    }

    setIsSubmitting(true);

    try {
      // Show loading toast
      const loadingToast = toast.loading("Setting up your account...");

      // Generate user ID
      const userIdRes = await fetch(`${DOMAIN}/api/auth/generate-user-id`, {
        credentials: "include",
      });

      if (!userIdRes.ok) {
        const error = await userIdRes.json();
        throw new Error(error.details || "Failed to generate user ID");
      }

      // Send onboarding data
      const aiRes = await fetch(
        `${DOMAIN}/api/chat/generateInitialRecommendations`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          credentials: "include",
          body: JSON.stringify(formData),
        }
      );

      if (!aiRes.ok) {
        const error = await aiRes.json();
        throw new Error(error.details || "Failed to get AI response");
      }

      // Dismiss loading toast and show success
      toast.dismiss(loadingToast);
      toast.success("Account setup complete!");

      // Redirect to dashboard
      router.push("/dashboard");
    } catch (error) {
      console.error("Onboarding error:", error);
      toast.error(error.message || "An error occurred during onboarding");
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <Navbar />
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="max-w-md mx-auto bg-white p-8 rounded-lg shadow-md mt-10"
      >
        <h1 className="text-2xl font-bold text-gray-800 mb-2">
          Welcome to MarketMind AI
        </h1>
        <p className="text-gray-600 mb-6">
          Let's personalize your marketing assistant
        </p>

        <form className="space-y-6" onSubmit={handleSubmit}>
          <div>
            <h2 className="text-lg font-semibold text-gray-700 mb-1">
              What's your business name?
            </h2>
            <input
              type="text"
              name="businessName"
              className={`w-full p-3 border ${
                errors.businessName ? "border-red-500" : "border-gray-300"
              } rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200`}
              placeholder="E.g. Acme Corp"
              value={formData.businessName}
              onChange={handleChange}
            />
            {errors.businessName && (
              <motion.p
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className="text-red-500 text-sm mt-1"
              >
                {errors.businessName}
              </motion.p>
            )}
          </div>

          <div>
            <h2 className="text-lg font-semibold text-gray-700 mb-1">
              What industry are you in?
            </h2>
            <select
              name="industry"
              className={`w-full p-3 border ${
                errors.industry ? "border-red-500" : "border-gray-300"
              } rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200`}
              value={formData.industry}
              onChange={handleChange}
            >
              <option value="">Select your industry</option>
              <option value="ecommerce">E-commerce</option>
              <option value="saas">SaaS</option>
              <option value="retail">Retail</option>
              <option value="agency">Marketing Agency</option>
              <option value="healthcare">Healthcare</option>
              <option value="finance">Finance</option>
              <option value="education">Education</option>
            </select>
            {errors.industry && (
              <motion.p
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className="text-red-500 text-sm mt-1"
              >
                {errors.industry}
              </motion.p>
            )}
          </div>

          <div>
            <h2 className="text-lg font-semibold text-gray-700 mb-1">
              Your primary marketing goal?
            </h2>
            <select
              name="goal"
              className={`w-full p-3 border ${
                errors.goal ? "border-red-500" : "border-gray-300"
              } rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200`}
              value={formData.goal}
              onChange={handleChange}
            >
              <option value="">Select a goal</option>
              <option value="leads">Generate more leads</option>
              <option value="brand">Build brand awareness</option>
              <option value="conversion">Improve conversion rates</option>
              <option value="engagement">Increase engagement</option>
              <option value="retention">Improve customer retention</option>
              <option value="sales">Boost direct sales</option>
            </select>
            {errors.goal && (
              <motion.p
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className="text-red-500 text-sm mt-1"
              >
                {errors.goal}
              </motion.p>
            )}
          </div>

          <div>
            <h2 className="text-lg font-semibold text-gray-700 mb-1">
              Current marketing challenges?
            </h2>
            <textarea
              name="challenges"
              className={`w-full p-3 border ${
                errors.challenges ? "border-red-500" : "border-gray-300"
              } rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 min-h-[100px] transition-all duration-200`}
              placeholder="E.g. Low social media engagement, poor ad performance..."
              value={formData.challenges}
              onChange={handleChange}
            />
            {errors.challenges && (
              <motion.p
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className="text-red-500 text-sm mt-1"
              >
                {errors.challenges}
              </motion.p>
            )}
          </div>

          <motion.button
            type="submit"
            disabled={isSubmitting}
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
            className="w-full mt-4 bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 px-4 rounded-md transition-colors disabled:opacity-50 flex justify-center items-center"
          >
            {isSubmitting ? (
              <>
                <LoadingDots />
                <span className="ml-2">Processing...</span>
              </>
            ) : (
              "Get Personalized Recommendations"
            )}
          </motion.button>
        </form>
      </motion.div>
    </div>
  );
}


/* File: ./src\app\components\LoadingDots.js */
export default function LoadingDots() {
  return (
    <div className="flex space-x-1 items-center">
      <span
        className="w-2 h-2 bg-gray-400 rounded-full animate-pulse"
        style={{ animationDelay: "0ms" }}
      ></span>
      <span
        className="w-2 h-2 bg-gray-400 rounded-full animate-pulse"
        style={{ animationDelay: "300ms" }}
      ></span>
      <span
        className="w-2 h-2 bg-gray-400 rounded-full animate-pulse"
        style={{ animationDelay: "600ms" }}
      ></span>
    </div>
  );
}


/* File: ./src\app\components\navbar.js */
"use client";
import React, { useState } from "react";
import Link from "next/link";

export default function Navbar({ active }) {
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);

  return (
    <header className="bg-white shadow-sm">
      <div className="max-w-6xl mx-auto px-4">
        <div className="flex justify-between items-center py-4">
          {/* Logo */}
          <div className="flex items-center space-x-2">
            <div className="w-8 h-8 bg-blue-600 rounded-full"></div>
            <Link href="/dashboard" className="font-bold text-lg">
              MarketMind AI
            </Link>
          </div>

          {/* Desktop Navigation */}
          <nav className="hidden md:flex space-x-8">
            <Link
              href="/dashboard"
              className={`${
                active === "dashboard"
                  ? "text-blue-600 font-medium"
                  : "text-gray-600"
              } hover:text-blue-600`}
            >
              Dashboard
            </Link>
            <Link
              href="#"
              className={`${
                active === "campaigns"
                  ? "text-blue-600 font-medium"
                  : "text-gray-600"
              } hover:text-blue-600`}
            >
              Campaigns
            </Link>
            <Link
              href="#"
              className={`${
                active === "analytics"
                  ? "text-blue-600 font-medium"
                  : "text-gray-600"
              } hover:text-blue-600`}
            >
              Analytics
            </Link>
            <Link
              href="#"
              className={`${
                active === "settings"
                  ? "text-blue-600 font-medium"
                  : "text-gray-600"
              } hover:text-blue-600`}
            >
              Settings
            </Link>
          </nav>

          {/* Mobile menu button */}
          <div className="md:hidden">
            <button
              type="button"
              className="text-gray-500 hover:text-gray-600"
              onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
            >
              <svg
                className="h-6 w-6"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                {mobileMenuOpen ? (
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M6 18L18 6M6 6l12 12"
                  />
                ) : (
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M4 6h16M4 12h16M4 18h16"
                  />
                )}
              </svg>
            </button>
          </div>
        </div>
      </div>

      {/* Mobile Menu */}
      {mobileMenuOpen && (
        <div className="md:hidden">
          <div className="px-2 pt-2 pb-3 space-y-1 sm:px-3">
            <Link
              href="/dashboard"
              className={`${
                active === "dashboard"
                  ? "bg-blue-50 text-blue-600"
                  : "text-gray-600"
              } block px-3 py-2 rounded-md text-base font-medium`}
              onClick={() => setMobileMenuOpen(false)}
            >
              Dashboard
            </Link>
            <Link
              href="#"
              className={`${
                active === "campaigns"
                  ? "bg-blue-50 text-blue-600"
                  : "text-gray-600"
              } block px-3 py-2 rounded-md text-base font-medium`}
              onClick={() => setMobileMenuOpen(false)}
            >
              Campaigns
            </Link>
            <Link
              href="#"
              className={`${
                active === "analytics"
                  ? "bg-blue-50 text-blue-600"
                  : "text-gray-600"
              } block px-3 py-2 rounded-md text-base font-medium`}
              onClick={() => setMobileMenuOpen(false)}
            >
              Analytics
            </Link>
            <Link
              href="#"
              className={`${
                active === "settings"
                  ? "bg-blue-50 text-blue-600"
                  : "text-gray-600"
              } block px-3 py-2 rounded-md text-base font-medium`}
              onClick={() => setMobileMenuOpen(false)}
            >
              Settings
            </Link>
          </div>
        </div>
      )}
    </header>
  );
}


/* File: ./src\app\dashboard\page.js */
"use client";
import React, { useState, useEffect, useRef } from "react";
import Navbar from "../components/navbar";
import { DOMAIN } from "../config";
import ReactMarkdown from "react-markdown";
import remarkGfm from "remark-gfm";
import toast from "react-hot-toast";
import LoadingDots from "../components/LoadingDots";
import { motion, AnimatePresence } from "framer-motion";
import { useAuth } from "../hooks/useAuth";

export default function Dashboard() {
  const [message, setMessage] = useState("");
  const [messages, setMessages] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef(null);
  const { isAuthenticated, isLoading: authLoading } = useAuth();
  const chatContainerRef = useRef(null);

  // Fetch chat history when component mounts
  useEffect(() => {
    const fetchChatHistory = async () => {
      try {
        setIsLoading(true);
        const response = await fetch(`${DOMAIN}/api/chat/history`, {
          credentials: "include",
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || "Failed to fetch chat history");
        }

        const data = await response.json();
        if (data.messages) {
          setMessages(data.messages);
        }
      } catch (error) {
        console.error("Failed to fetch chat history:", error);
        toast.error(error.message || "Failed to load chat history");
      } finally {
        setIsLoading(false);
      }
    };

    if (isAuthenticated) {
      fetchChatHistory();
    }
  }, [isAuthenticated]);

  // Scroll to bottom when messages change
  useEffect(() => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: "smooth" });
    }
  }, [messages]);

  const handleSendMessage = async () => {
    if (!message.trim()) return;

    try {
      setIsLoading(true);
      // Optimistically add user message
      setMessages((prev) => [...prev, { text: message, isUser: true }]);

      const response = await fetch(`${DOMAIN}/api/chat/ai-request`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        credentials: "include",
        body: JSON.stringify({ query: message }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "Failed to get response");
      }

      const data = await response.json();

      if (data.response) {
        setMessages(
          data.history || [...messages, { text: data.response, isUser: false }]
        );
        toast.success("Response received", { duration: 2000 });
      }

      setMessage("");
    } catch (error) {
      console.error("Failed to send message:", error);
      toast.error(error.message || "Failed to send message");
      // Remove the optimistic message
      setMessages((prev) => prev.slice(0, -1));
    } finally {
      setIsLoading(false);
    }
  };

  if (authLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <LoadingDots />
          <p className="mt-4 text-gray-600">Loading your dashboard...</p>
        </div>
      </div>
    );
  }

  if (!isAuthenticated && !authLoading) {
    // Redirect to login or show unauthorized message
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center p-8 bg-white rounded-lg shadow-md max-w-md">
          <h2 className="text-2xl font-bold text-red-600 mb-4">
            Access Denied
          </h2>
          <p className="text-gray-600 mb-6">
            You need to be logged in to access this page.
          </p>
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={() => (window.location.href = "/")}
            className="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md transition-colors"
          >
            Go to Login
          </motion.button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <Navbar active="dashboard" />
      <div className="max-w-4xl mx-auto pt-8 px-4">
        <motion.h1
          initial={{ opacity: 0, y: -10 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-2xl font-bold text-gray-800 mb-6"
        >
          Dashboard
        </motion.h1>

        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="bg-white p-6 rounded-lg shadow-sm mb-6 space-y-4 max-h-[70vh] overflow-y-auto"
          ref={chatContainerRef}
        >
          {messages.length === 0 && !isLoading ? (
            <div className="text-center py-8 text-gray-500">
              Start a conversation with your marketing assistant
            </div>
          ) : (
            <AnimatePresence>
              {messages.map((msg, index) => (
                <motion.div
                  key={index}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0 }}
                  transition={{ duration: 0.3 }}
                  className={`flex ${
                    msg.isUser ? "justify-end" : "justify-start"
                  }`}
                >
                  <div
                    className={`max-w-3xl p-4 rounded-lg ${
                      msg.isUser
                        ? "bg-blue-600 text-white shadow-blue-200 shadow-md"
                        : "bg-white border border-gray-100 text-gray-800 shadow-sm prose prose-sm sm:prose lg:prose-lg xl:prose-xl"
                    }`}
                  >
                    {msg.isUser ? (
                      <div className="whitespace-pre-wrap">{msg.text}</div>
                    ) : (
                      <ReactMarkdown
                        remarkPlugins={[remarkGfm]}
                        components={{
                          p: ({ node, ...props }) => (
                            <p className="my-4" {...props} />
                          ),
                          ul: ({ node, ...props }) => (
                            <ul className="list-disc pl-6 my-4" {...props} />
                          ),
                          ol: ({ node, ...props }) => (
                            <ol className="list-decimal pl-6 my-4" {...props} />
                          ),
                          li: ({ node, ...props }) => (
                            <li className="my-2" {...props} />
                          ),
                          code: ({ node, ...props }) => (
                            <code
                              className="bg-gray-200 rounded px-1 py-0.5 text-sm"
                              {...props}
                            />
                          ),
                          pre: ({ node, ...props }) => (
                            <pre
                              className="bg-gray-100 p-4 rounded overflow-x-auto my-4"
                              {...props}
                            />
                          ),
                        }}
                      >
                        {msg.text}
                      </ReactMarkdown>
                    )}
                  </div>
                </motion.div>
              ))}
            </AnimatePresence>
          )}
          {isLoading && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              className="flex justify-start"
            >
              <div className="max-w-3xl p-4 rounded-lg bg-white border border-gray-100 shadow-sm">
                <LoadingDots />
              </div>
            </motion.div>
          )}
          <div ref={messagesEndRef} />
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
          className="mt-6 flex space-x-4"
        >
          <input
            type="text"
            className="flex-1 p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200"
            placeholder="Type your marketing question..."
            value={message}
            onChange={(e) => setMessage(e.target.value)}
            onKeyPress={(e) => e.key === "Enter" && handleSendMessage()}
            disabled={isLoading}
          />
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-md transition-colors disabled:opacity-50 flex items-center"
            onClick={handleSendMessage}
            disabled={isLoading || !message.trim()}
          >
            {isLoading ? (
              <>
                <LoadingDots />
                <span className="ml-2">Sending...</span>
              </>
            ) : (
              "Send"
            )}
          </motion.button>
        </motion.div>
      </div>
    </div>
  );
}


/* File: ./src\app\hooks\useAuth.js */
import { useState, useEffect } from "react";
import { DOMAIN } from "../config";

export function useAuth() {
  const [authState, setAuthState] = useState({
    isAuthenticated: false,
    isLoading: true,
    userId: null,
  });

  useEffect(() => {
    const checkAuth = async () => {
      try {
        const res = await fetch(`${DOMAIN}/api/auth/status`, {
          credentials: "include",
        });

        if (res.ok) {
          const data = await res.json();
          setAuthState({
            isAuthenticated: data.authenticated,
            userId: data.userId,
            isLoading: false,
          });
        } else {
          setAuthState({
            isAuthenticated: false,
            userId: null,
            isLoading: false,
          });
        }
      } catch (error) {
        setAuthState({
          isAuthenticated: false,
          userId: null,
          isLoading: false,
        });
      }
    };

    checkAuth();
  }, []);

  return authState;
}

